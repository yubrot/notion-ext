import { program } from 'commander'
import { Client } from '@notionhq/client'
import {
  bulletedListItem,
  callout,
  code,
  create,
  heading1,
  heading2,
  heading3,
  image,
  mapLink,
  paragraph,
  space,
  table,
  tableRow,
  text,
  toBlocks,
  toggle,
  toInlines,
  toPageUrl,
} from '@yubrot/notion-flexible-blocks'

await program
  .option('--notion-api-key <key>', 'Notion API Key')
  .argument('<blockId>', 'Target block ID')
  .action(main)
  .parseAsync(process.argv)

async function main(blockId: string, options: { notionApiKey?: string }) {
  const notionApiKey = options.notionApiKey || process.env.NOTION_API_KEY
  if (!notionApiKey) {
    console.error(
      'Notion API Key is required. Please provide it via --notion-api-key or NOTION_API_KEY environment variable.',
    )
    process.exit(1)
  }

  try {
    const client = new Client({ auth: notionApiKey })
    await create(client, blockId, [
      exampleHeaderCallout(),
      ...headingExample(),
      space,
      ...paragraphExample(),
      space,
      ...richTextAnnotationsExample(),
      space,
      ...nestedListsExample(),
      space,
      ...layoutsExample(),
    ])
    console.log(toPageUrl(blockId))
  } catch (error) {
    console.error('Failed to create blocks:', error)
    process.exit(1)
  }
}

function exampleHeaderCallout() {
  const co = callout([
    ...text('THIS PAGE IS GENERATED BY '),
    mapLink(
      text('yubrot/notion-ext/notion-flexible-blocks-example')[0],
      () => 'https://github.com/yubrot/notion-ext/tree/main/notion-flexible-blocks-example',
    ),
  ])
  if (co.data.type === 'callout') co.data.callout.color = 'blue_background'
  return co
}

function headingExample() {
  return [
    heading1(text('Heading 1')),
    heading2(text('Heading 2')),
    heading3(text('Heading 3')),

    space,
    sourceCode(`
[
  heading1(text('Heading 1')),
  heading2(text('Heading 2')),
  heading3(text('Heading 3')),
]
      `),
  ]
}

function paragraphExample() {
  return [
    paragraph(
      text(
        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
      ),
    ),
    paragraph(
      text(
        'あのイーハトーヴォのすきとおった風、夏でも底に冷たさをもつ青いそら、うつくしい森で飾られたモリーオ市、郊外のぎらぎらひかる草の波。',
      ),
    ),

    space,
    sourceCode(`
[
  paragraph(
    text(
      'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
    )
  ),
  paragraph(
    text(
      'あのイーハトーヴォのすきとおった風、夏でも底に冷たさをもつ青いそら、うつくしい森で飾られたモリーオ市、郊外のぎらぎらひかる草の波。',
    ),
  ),
]
      `),
  ]
}

function richTextAnnotationsExample() {
  return [
    ...text('Default'),
    ...text(' '),
    ...text('Bold', { bold: true }),
    ...text(' '),
    ...text('Italic', { italic: true }),
    ...text(' '),
    ...text('Strikethrough', { strikethrough: true }),
    ...text(' '),
    ...text('Underline', { underline: true }),
    ...text(' '),
    ...text('Code', { code: true }),
    ...text(' '),
    ...text('Color', { color: 'blue' }),

    space,
    sourceCode(`
[
  ...text('Default'),
  ...text(' '),
  ...text('Bold', { bold: true }),
  ...text(' '),
  ...text('Italic', { italic: true }),
  ...text(' '),
  ...text('Strikethrough', { strikethrough: true }),
  ...text(' '),
  ...text('Underline', { underline: true }),
  ...text(' '),
  ...text('Code', { code: true }),
  ...text(' '),
  ...text('Color', { color: 'blue' }),
]
      `),
  ]
}

function nestedListsExample() {
  return [
    bulletedListItem(text('0'), [
      bulletedListItem(text('0-0'), [
        bulletedListItem(text('0-0-0')),
        bulletedListItem(text('0-0-1')),
        bulletedListItem(text('0-0-2')),
      ]),
      bulletedListItem(text('0-1'), [
        bulletedListItem(text('0-1-0'), [bulletedListItem(text('0-1-0-0')), bulletedListItem(text('0-1-0-1'))]),
        bulletedListItem(text('0-1-1'), [bulletedListItem(text('0-1-1-0')), bulletedListItem(text('0-1-1-1'))]),
      ]),
    ]),

    space,
    sourceCode(`
[
  bulletedListItem(text('0'), [
    bulletedListItem(text('0-0'), [
      bulletedListItem(text('0-0-0')),
      bulletedListItem(text('0-0-1')),
      bulletedListItem(text('0-0-2')),
    ]),
    bulletedListItem(text('0-1'), [
      bulletedListItem(text('0-1-0'), [bulletedListItem(text('0-1-0-0')), bulletedListItem(text('0-1-0-1'))]),
      bulletedListItem(text('0-1-1'), [bulletedListItem(text('0-1-1-0')), bulletedListItem(text('0-1-1-1'))]),
    ]),
  ]),
]
      `),
  ]
}

function layoutsExample() {
  const fbs = [
    ...text('foo '),
    ...text('bar '),
    ...image({ external: { url: 'https://picsum.photos/200/100.jpg' } }),
    ...text(' baz'),
  ]
  const [inlines, extraBlocks] = toInlines(fbs)

  return [
    heading3(text('(1) toBlocks')),
    ...toBlocks(fbs),

    heading3(text('(2) toInlines with tables')),
    table(1, [tableRow([inlines])]),
    ...extraBlocks,

    space,
    sourceCode(`
[
  // const fbs = [
  //   ...text('foo '),
  //   ...text('bar '),
  //   ...image({ external: { url: 'https://picsum.photos/200/100.jpg' } }),
  //   ...text(' baz'),
  // ]
  heading3(text('(1) toBlocks')),
  ...toBlocks(fbs),

  // const [inlines, extraBlocks] = toInlines(fbs)
  heading3(text('(2) toInlines with tables')),
  table(1, [tableRow([inlines])]),
  ...extraBlocks,
]
      `),
  ]
}

function sourceCode(src: string) {
  const t = toggle(text('Source code'), [
    code(`create(new Client({ auth: process.env.NOTION_API_KEY }), blockId, ${src.trim()})`, 'ts'),
  ])
  if (t.data.type === 'toggle') t.data.toggle.color = 'gray_background'
  return t
}
